1. Linear search (brute force)
// Iteration
for (int i=0; i < size; i++) {
    if (arr[i] == x) {
        // found
    }
}
// Recursive
int search (int arr[], int size, int x) {
    if (size == 0) return -1;
    if (arr[0] == x) return 1;
    return search(arr + 1, size - 1, x)
}

// Efficient O(n) -> Not gud
- Best case, 1 operation
- Average, n/2 operations
- Worse, n operations

2. Binary search
// Iteration
int binary(int arr[], int size; int x) {
    int low = 0;
    int high = size - 1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (x < arr[mid]) { // go to left
            high = mid - 1;
        }
        else if (x > arr[mid]) { // go to right
            low = mid + 1;
        }
        else {
            return a[mid];
        }
    }
}
// Recursive
int binary(int arr[], int low, int high, int x) {
    if (low > high) {
        return -1;
    }
    mid = (low + high) / 2;
    if (arr[mid] < x) {
        return binary(arr, low, mid - 1; x);
    }
    else if (arr[mid] > x) {
        return binary(arr, mid + 1; high, x);
    }
    else {
        return arr[mid];
    }
}

// Efficient -> Olog(n)

